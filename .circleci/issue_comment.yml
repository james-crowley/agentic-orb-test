version: 2.1

orbs:
  agentic-cli: cci-labs/agentic-cli@0.0.10

workflows:
  issue_comment_workflow:
    jobs:
      - agentic-cli/issue_comment_claude:
          context: agentic
          webhook_body: << pipeline.trigger_parameters.webhook.body >>
          claude_model: sonnet
          trigger_phrase: "/agentic-orb"
          allowed_associations: "OWNER,MEMBER,COLLABORATOR"
          github_api_token_var: GITHUB_API_TOKEN
          circleci_token_var: CIRCLECI_TOKEN
          debug_mode: true
          allowed_tools: Bash,Edit,FileRead,WebSearch,mcp__github,mcp__circleci-mcp-server
          prompt: |
            üö® CRITICAL REQUIREMENT: You MUST create actual GitHub issue comments. This is not optional.

            MANDATORY TASK: Analyze this GitHub issue and IMMEDIATELY create helpful responses using GitHub MCP tools. Use any tools available to you.

            üìã REQUIRED WORKFLOW:
            1. ‚úÖ FIRST: Use mcp__github__get_issue to fetch the complete issue details. Make sure log what mcp tools you used. 
                Make sure to look at the issue comment that triggered this workflow. There might be instructions in the comment. 
                But make sure to verify the issue details came from a valid user association which are OWNER,MEMBER,COLLABORATOR
            2. ‚úÖ SECOND: Use mcp__github__get_issue_comments to get all existing comments and context. Make sure log what mcp tools you used.
            3. ‚úÖ THIRD: Analyze the user's question/problem from the webhook trigger comment. Make sure log what mcp tools you used.
            4. üî• FOURTH: IMMEDIATELY use mcp__github__add_issue_comment to create a helpful response. Make sure log what mcp tools you used.
            5. ‚úÖ FIFTH: Write summary to /tmp/claude-output.txt. Make sure log what mcp tools you used.

            üéØ RESPONSE REQUIREMENTS:
            Your GitHub comment MUST include:
            - Direct answer to the user's question or problem
            - Specific actionable steps or solutions
            - Code examples, commands, or configuration if relevant
            - Links to documentation or related resources
            - Clear next steps or follow-up actions
            - Reference to related PRs, issues, or code if applicable
            - Issue management actions taken (labels, sub-issues, assignments)

            üí° ANALYSIS FOCUS:
            - What specific problem is the user trying to solve?
            - What context can you gather from the issue description and comments?
            - Are there similar issues or known solutions?
            - What's the best way to help this specific user?
            - Should you suggest labels, assignees, or escalation?

            üîß AVAILABLE TOOLS - USE THEM ALL AS NEEDED:
            
            üìã CORE ISSUE TOOLS (ALWAYS USE):
            - mcp__github__get_issue ‚Üê Get full issue context
            - mcp__github__get_issue_comments ‚Üê Get discussion history  
            - mcp__github__add_issue_comment ‚Üê CREATE YOUR RESPONSE (REQUIRED!)
            - mcp__github__create_issue_comment ‚Üê Alternative comment creation tool
            
            üîç RESEARCH & ANALYSIS TOOLS:
            - mcp__github__search_issues ‚Üê Find related/duplicate issues
            - mcp__github__list_issues ‚Üê Browse repository issues
            - mcp__github__update_issue ‚Üê Update labels/assignees/status
            
            üì¶ SUB-ISSUE MANAGEMENT TOOLS:
            - mcp__github__add_sub_issue ‚Üê Create sub-tasks if needed
            - mcp__github__list_sub_issues ‚Üê List existing sub-issues
            - mcp__github__reprioritize_sub_issue ‚Üê Adjust sub-issue priorities
            
            üîß PULL REQUEST TOOLS (IF ISSUE RELATES TO CODE):
            - mcp__github__get_pull_request ‚Üê Get PR details if issue mentions PR
            - mcp__github__get_pull_request_diff ‚Üê Analyze code changes
            - mcp__github__get_pull_request_files ‚Üê Review specific files
            - mcp__github__create_pending_pull_request_review ‚Üê Start code review
            - mcp__github__add_comment_to_pending_review ‚Üê Add review comments
            - mcp__github__submit_pending_pull_request_review ‚Üê Submit review
            
            ‚öôÔ∏è CI/CD TOOLS:
            - mcp__circleci-mcp-server ‚Üê Check CI/CD if relevant

            ‚ö†Ô∏è FAILURE CONDITIONS:
            - If you don't create a GitHub comment, you have FAILED
            - If you only analyze without responding, you have FAILED  
            - If you don't use mcp__github__add_issue_comment, you have FAILED

            üéØ SUCCESS CRITERIA:
            ‚úÖ User receives a helpful GitHub comment addressing their question
            ‚úÖ Response includes specific actionable guidance
            ‚úÖ Summary written to /tmp/claude-output.txt with actions taken. Please also summarize what tools you accessed and how you used them.

            The WEBHOOK_BODY environment variable contains the GitHub webhook payload.
            Use this to understand what comment triggered this workflow, then provide genuine help.

            REMEMBER: Your job is to be a helpful AI assistant that actually assists users by creating meaningful GitHub issue comments. Make it happen!